<?xml version="1.0" encoding="UTF-8" ?>
<class name="Inventory" inherits="NodeInventories" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		This node is a stack container.
	</brief_description>
	<description>
		Each stack contains data about amount, [ItemStack](with String item_id from [InventoryDatabase]) and custom properties.
		Stacks are stored in an Array, which can be accessed with inventory.stacks, but it is best to avoid changing data directly and instead use methods within this node, such as [method add], [method remove], [method set_stack_content], ...
		The methods correctly call signals when necessary.

		Some methods have their general version and a direct version of some [Stack] index, such as [method contains] and [method contains_at].
	</description>
	<tutorials>
		<link title="Add items to inventory">https://expressobits.com/inventory-system/getting_started/quickstart/add_items_to_inventory.html</link>
		<link title="Operations between Inventories">https://expressobits.com/inventory-system/getting_started/quickstart/operation_between_inventories.html</link>
	</tutorials>
	<methods>
		<method name="add">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<param index="3" name="drop_excess" type="bool" default="false" />
			<param index="4" name="can_emit_item_added_signal" type="bool" default="true" />
			<description>
				Adds an amount of [ItemStack] to the inventory and returns the amount that cannot be added.
				[codeblocks]
				[gdscript]
				inventory.add("my_item_id", 2) # Add two my_item_id to inventory
				[/gdscript]
				[/codeblocks]

				There are cases where the inventory may be full or does not accept this item by its category, so the return of this call corresponds to the quantity that was not added (If it returns 0 it means that all items were added correctly)
				[codeblocks]
				[gdscript]
				var unadded_amount = inventory.add("my_item_id", 2) # Add two my_item to inventory
				if unadded_amount == 0:
				    print("All items added!")
				else:
				    print(unadded_amount, " items were not added")
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="add_at_index">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<param index="4" name="can_emit_item_added_signal" type="bool" default="true" />
			<description>
				Adds an amount of [ItemStack](with string id from [InventoryDatabase]) to a specific inventory stack index and returns the amount that cannot be added.
				[codeblocks]
				[gdscript]
				inventory.add_at_index(3, "my_item_id", 2) # Add two my_item to inventory in 3 stack index
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="add_on_new_stack">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<param index="3" name="can_emit_stack_added_signal" type="bool" default="true" />
			<param index="4" name="can_emit_item_added_signal" type="bool" default="true" />
			<description>
				Add [param item_id] to a new stack, ignoring the possibility of adding that item to an existing stack.
			</description>
		</method>
		<method name="add_to_stack">
			<return type="int" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<param index="4" name="can_emit_item_added_signal" type="bool" default="true" />
			<description>
				Adds an amount of item_id to the specified stack and returns the amount that cannot be added.
				[codeblocks]
				[gdscript]
				inventory.add_to_stack(stack, "my_item_id", 2) # Add two my_item to inventory in stack
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="amount_of_item" qualifiers="const">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<description>
				Returns amount of the specified [ItemStack].
			</description>
		</method>
		<method name="can_add_new_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
				Returns true if it is possible to add a new stack to the inventory, note that this method consults the configured constraints.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears the inventory, removing all stacks.
				[codeblocks]
				[gdscript]
				inventory.clear() # Clear inventory
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="contains" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Returns true if contains the amount of the specified [ItemStack](with String item_id from [InventoryDatabase]).
			</description>
		</method>
		<method name="contains_at" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Returns true if the stack index contains the amount of the specified [ItemStack](with String item_id from [InventoryDatabase]).
			</description>
		</method>
		<method name="contains_category" qualifiers="const">
			<return type="bool" />
			<param index="0" name="category" type="ItemCategory" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Returns true if contains the amount of [ItemStack](with String item_id from [InventoryDatabase]) with the specified [ItemCategory].
			</description>
		</method>
		<method name="contains_category_in_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="category" type="ItemCategory" />
			<description>
				Returns true if the stack contains the amount of item (with String item_id from [InventoryDatabase]) with the specified [ItemCategory].
			</description>
		</method>
		<method name="deserialize">
			<return type="void" />
			<param index="0" name="data" type="Dictionary" />
			<description>
				Deserializes the inventory with a previously serialized dictionary by rewriting the data of this inventory.
			</description>
		</method>
		<method name="drop">
			<return type="bool" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
				Drop the specified amount of item(with String item_id from [InventoryDatabase]) from inventory and returns true if it was successful.
				[codeblocks]
				[gdscript]
				inventory.drop("my_item_id", 2) # Drop two my_item_id from inventory
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="drop_all_stacks">
			<return type="void" />
			<description>
				Drop all stacks on inventory, [request_drop_item] signal is emitted for each stack.
			</description>
		</method>
		<method name="drop_from_inventory">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
				Drop the stack with the specified index.
				[codeblocks]
				[gdscript]
				inventory.drop_from_inventory(0) # Drop stack with index 0
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="get_amount" qualifiers="const">
			<return type="int" />
			<description>
				Returns amount of items.
			</description>
		</method>
		<method name="get_amount_of_category" qualifiers="const">
			<return type="int" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
				Returns amount of the specified [ItemCategory].
			</description>
		</method>
		<method name="get_stack_index_with_an_item_of_category" qualifiers="const">
			<return type="int" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
				Returns the index of the first stack that contains an item of the specified [ItemCategory].
				If there is no stack with an item of this category, it returns -1.
			</description>
		</method>
		<method name="get_weight" qualifiers="const">
			<return type="float" />
			<description>
				Returns the weight of the inventory.
				The weight is calculated by summing the weight of all items in the inventory.
				[codeblocks]
				[gdscript]
				var weight = inventory.get_weight() # Get weight of inventory
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="has_space_for" qualifiers="const">
			<return type="bool" />
			<param index="0" name="item" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<param index="2" name="properties" type="Dictionary" default="{}" />
			<description>
				Returns true if the inventory has space for the specified [ItemStack](with String item_id from [InventoryDatabase]).
				Note: This method check the constraints too.
			</description>
		</method>
		<method name="has_stack" qualifiers="const">
			<return type="bool" />
			<param index="0" name="stack" type="ItemStack" />
			<description>
				Returns true if the inventory has a stack with the specified [ItemStack].
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if inventory is empty.
			</description>
		</method>
		<method name="is_full" qualifiers="const">
			<return type="bool" />
			<description>
				Returns true if inventory is full.
			</description>
		</method>
		<method name="remove">
			<return type="int" />
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Removes a amount of the [ItemStack](with String item_id from [InventoryDatabase]) from inventory and returns the amount that was not removed.
			</description>
		</method>
		<method name="remove_at">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Removes an item_id amount to the specified inventory [ItemStack] index and returns the remaining value that was not removed.
			</description>
		</method>
		<method name="remove_from_stack">
			<return type="int" />
			<param index="0" name="stack" type="ItemStack" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Remove stack with [param stack] parameter, set [param emit_signal] to false to disable events called by [method update_stack].
			</description>
		</method>
		<method name="remove_stack">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<description>
				Removes the stack with the specified index.
				[codeblocks]
				[gdscript]
				inventory.remove_stack(0) # Remove stack with index 0
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="serialize" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Serializes the inventory returning a dictionary with inventory information.
			</description>
		</method>
		<method name="set_stack_content">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="item_id" type="String" />
			<param index="2" name="amount" type="int" default="1" />
			<param index="3" name="properties" type="Dictionary" default="{}" />
			<description>
				Sets the content of the stack with the specified index.
				[codeblocks]
				[gdscript]
				inventory.set_stack_content(0, "my_item_id", 2) # Set stack with index 0 to my_item_id and amount 2
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="split">
			<return type="bool" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="amount" type="int" default="1" />
			<description>
				Splits the stack at the specified index and returns true if it was successful.
				[codeblocks]
				[gdscript]
				inventory.split(0, 2) # Split stack with index 0 and amount 2
				[/gdscript]
				[/codeblocks]
			</description>
		</method>
		<method name="transfer">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="destination" type="Inventory" />
			<param index="2" name="amount" type="int" default="1" />
			<description>
				Transfer the contents of the stack_index [param stack_index] of this inventory to another inventory ([param destination]).
				Note: If amount is -1 (default value), the entire contents of the stack are sent to another inventory.
			</description>
		</method>
		<method name="transfer_at">
			<return type="int" />
			<param index="0" name="stack_index" type="int" />
			<param index="1" name="destination" type="Inventory" />
			<param index="2" name="destination_stack_index" type="int" />
			<param index="3" name="amount" type="int" default="1" />
			<description>
				Transfer the contents of the stack_index [param stack_index] of this inventory to another stack_index ([param destination_stack_index]) of destination [Inventory].
				Note: If amount is -1 (default value), the entire contents of the stack are sent to another inventory.
			</description>
		</method>
		<method name="update_stack">
			<return type="void" />
			<param index="0" name="stack_index" type="int" />
			<description>
				Updates the stack with the specified index.
				This method is called automatically when a stack is added or removed, but it can also be called manually to update the stack.
				[codeblocks]
				[gdscript]
				inventory.update_stack(0) # Update stack with index 0
				[/gdscript]
				[/codeblocks]
				Note: This method emits the [signal updated_stack] signal.
			</description>
		</method>
	</methods>
	<members>
		<member name="constraints" type="InventoryConstraint[]" setter="set_constraints" getter="get_constraints" default="[]">
			Resources that extend [InventoryConstraint] and define rules about inventory additions.
		</member>
		<member name="inventory_name" type="String" setter="set_inventory_name" getter="get_inventory_name" default="&quot;Inventory&quot;">
			The name of the inventory, to be displayed in UI.
		</member>
		<member name="stacks" type="ItemStack[]" setter="set_stacks" getter="get_stacks" default="[]">
			[ItemStack] list, which stores three pieces of information: item_id, amount and dynamic properties of the items.
		</member>
	</members>
	<signals>
		<signal name="contents_changed">
			<description>
				Emitted when the contents of the inventory change.
				This signal is emitted after the [method remove], [method remove_at], [method set_stack_content], [method add], [method add_at] or [method update_stack] function.
			</description>
		</signal>
		<signal name="emptied">
			<description>
				Emitted when inventory is empty. This signal is emitted after the [method remove], [method remove_at] or [method set_stack_content] function and it only happens when there are no stacks.
			</description>
		</signal>
		<signal name="filled">
			<description>
				Emitted when inventory is filled. This signal is emitted after the [method add], [method add_at] or [method set_stack_content] function and it only happens when all stacks are filled.
			</description>
		</signal>
		<signal name="item_added">
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" />
			<description>
				Emitted when a [Item] was added.
			</description>
		</signal>
		<signal name="item_removed">
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" />
			<description>
				Emitted when a [Item] was removed.
			</description>
		</signal>
		<signal name="request_drop_item">
			<param index="0" name="item_id" type="String" />
			<param index="1" name="amount" type="int" />
			<param index="2" name="item_properties" type="Dictionary" />
			<description>
				Emitted when the [method drop] method is called (Usually called within [method drop_from_inventory] or [method drop_all_stacks]).
			</description>
		</signal>
		<signal name="stack_added">
			<param index="0" name="stack_index" type="int" />
			<description>
				Emitted when a new stack is added to the inventory.
				This signal is emitted after the [method add], [method add_at] or [method add_new_stack] function.
			</description>
		</signal>
		<signal name="stack_removed">
			<param index="0" name="stack_index" type="int" />
			<description>
				Emitted when a stack is removed from the inventory.
				This signal is emitted after the [method remove], [method remove_at] or [method remove_stack] function.
			</description>
		</signal>
		<signal name="updated_stack">
			<param index="0" name="stack_index" type="int" />
			<description>
				Emitted when a stack is updated.
				This signal is emitted after the [method update_stack] function.
			</description>
		</signal>
	</signals>
</class>
