<?xml version="1.0" encoding="UTF-8" ?>
<class name="InventoryDatabase" inherits="Resource" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Database of items, recipe, categories, craftstations and loots.
	</brief_description>
	<description>
		The InventoryDatabase is the core resource that manages all inventory-related data including item definitions, recipes, categories, craft station types, and loot resources. It provides methods for adding, removing, and accessing these resources, as well as serialization capabilities for saving and loading data.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_craft_station_type">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="add_item">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="add_item_category">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="add_loot">
			<return type="void" />
			<description>
				Create and add an empty [Loot] resource to the database.
			</description>
		</method>
		<method name="add_new_category">
			<return type="void" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
				Add new [ItemCategory] to database. This method update category code cache for fast check categories in running game.
			</description>
		</method>
		<method name="add_new_craft_station_type">
			<return type="void" />
			<param index="0" name="craft_station_type" type="CraftStationType" />
			<description>
			</description>
		</method>
		<method name="add_new_item">
			<return type="void" />
			<param index="0" name="item" type="ItemDefinition" />
			<description>
				Add new [ItemDefinition] to database. This method update item definition code cache for fast check items id in running game.
			</description>
		</method>
		<method name="add_new_loot">
			<return type="void" />
			<param index="0" name="loot" type="Loot" />
			<description>
				Add new [Loot] resource to database. This method adds a loot resource containing weighted items for random generation.
			</description>
		</method>
		<method name="add_new_recipe">
			<return type="void" />
			<param index="0" name="recipe" type="Recipe" />
			<description>
			</description>
		</method>
		<method name="add_recipe">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="clear_current_data">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="create_dynamic_properties">
			<return type="Dictionary" />
			<param index="0" name="item_id" type="String" />
			<description>
			</description>
		</method>
		<method name="deserialize_item_category" qualifiers="const">
			<return type="void" />
			<param index="0" name="category" type="ItemCategory" />
			<param index="1" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="deserialize_item_definition" qualifiers="const">
			<return type="void" />
			<param index="0" name="definition" type="ItemDefinition" />
			<param index="1" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="deserialize_loot" qualifiers="const">
			<return type="void" />
			<param index="0" name="loot" type="Loot" />
			<param index="1" name="data" type="Dictionary" />
			<description>
				Deserialize loot data from a Dictionary into a [Loot] resource.
			</description>
		</method>
		<method name="deserialize_recipe" qualifiers="const">
			<return type="void" />
			<param index="0" name="recipe" type="Recipe" />
			<param index="1" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="deserialize_station_type" qualifiers="const">
			<return type="void" />
			<param index="0" name="station_type" type="CraftStationType" />
			<param index="1" name="data" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="export_json_file">
			<return type="int" enum="Error" />
			<param index="0" name="path" type="String" />
			<description>
			</description>
		</method>
		<method name="export_to_invdata" qualifiers="const">
			<return type="String" />
			<description>
			</description>
		</method>
		<method name="get_category">
			<return type="ItemCategory" />
			<param index="0" name="code" type="int" />
			<description>
				Return [ItemCategory] of code. This code is used as a bitflag to easily access the item in your category list when running the game.
			</description>
		</method>
		<method name="get_category_from_id" qualifiers="const">
			<return type="ItemCategory" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="get_craft_station_from_id" qualifiers="const">
			<return type="CraftStationType" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="get_item" qualifiers="const">
			<return type="ItemDefinition" />
			<param index="0" name="id" type="String" />
			<description>
				Returns an [ItemDefinition] based on the param [param id]. This ID is searched for in the cache list managed by this database, this list is updated when we run the game.
			</description>
		</method>
		<method name="get_loot_from_id" qualifiers="const">
			<return type="Loot" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="get_new_valid_id" qualifiers="const">
			<return type="String" />
			<description>
				Returns a new valid identifier for the [ItemDefinition]. This method does not return ids that already exist.
			</description>
		</method>
		<method name="get_valid_id" qualifiers="const">
			<return type="String" />
			<description>
				Returns an existing id of [member items].
			</description>
		</method>
		<method name="has_craft_station_type_id" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="has_item_category_id" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="has_item_id" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="String" />
			<description>
				Returns true if there is an [ItemDefinition] with the [param id].
			</description>
		</method>
		<method name="has_item_name" qualifiers="const">
			<return type="bool" />
			<param index="0" name="name" type="String" />
			<description>
			</description>
		</method>
		<method name="has_loot_id" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="String" />
			<description>
			</description>
		</method>
		<method name="import_from_invdata">
			<return type="void" />
			<param index="0" name="json" type="String" />
			<description>
			</description>
		</method>
		<method name="import_json_file">
			<return type="int" enum="Error" />
			<param index="0" name="path" type="String" />
			<description>
			</description>
		</method>
		<method name="remove_category">
			<return type="void" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
				Remove [ItemCategory] from database. This method updates the category bitflag cache.
			</description>
		</method>
		<method name="remove_craft_station_type">
			<return type="void" />
			<param index="0" name="craft_station_type" type="CraftStationType" />
			<description>
			</description>
		</method>
		<method name="remove_item">
			<return type="void" />
			<param index="0" name="item" type="ItemDefinition" />
			<description>
				Remove [ItemDefinition] from database. This method update item definition code cache for fast check items id in running game.
			</description>
		</method>
		<method name="remove_loot">
			<return type="void" />
			<param index="0" name="loot" type="Loot" />
			<description>
				Remove [Loot] resource from database.
			</description>
		</method>
		<method name="remove_recipe">
			<return type="void" />
			<param index="0" name="recipe" type="Recipe" />
			<description>
			</description>
		</method>
		<method name="serialize_item_category" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="category" type="ItemCategory" />
			<description>
			</description>
		</method>
		<method name="serialize_item_definition" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="definition" type="ItemDefinition" />
			<description>
			</description>
		</method>
		<method name="serialize_loot" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="loot" type="Loot" />
			<description>
				Serialize a [Loot] resource into a Dictionary for storage.
			</description>
		</method>
		<method name="serialize_recipe" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="recipe" type="Recipe" />
			<description>
			</description>
		</method>
		<method name="serialize_station_type" qualifiers="const">
			<return type="Dictionary" />
			<param index="0" name="station_type" type="CraftStationType" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="item_categories" type="ItemCategory[]" setter="set_item_categories" getter="get_item_categories" default="[]">
			[ItemCategory] list in database. Use [method add_category] for add and [method remove_category] for remove.
		</member>
		<member name="items" type="ItemDefinition[]" setter="set_items" getter="get_items" default="[]">
			[ItemDefinition] list in database. Use [method add_new_item] for add and [method remove_item] for remove.
		</member>
		<member name="loots" type="Loot[]" setter="set_loots" getter="get_loots" default="[]">
			[Loot] resource list in database. Use [method add_new_loot] for add and [method remove_loot] for remove.
		</member>
		<member name="recipes" type="Recipe[]" setter="set_recipes" getter="get_recipes" default="[]">
			[Recipe] list in database.
		</member>
		<member name="stations_type" type="CraftStationType[]" setter="set_stations_type" getter="get_stations_type" default="[]">
			[CraftStationType] list in database.
		</member>
	</members>
</class>
