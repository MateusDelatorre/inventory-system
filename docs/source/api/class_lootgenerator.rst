:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc_classes/LootGenerator.xml.

.. _class_LootGenerator:

LootGenerator
=============

**Inherits:** :ref:`NodeInventories<class_NodeInventories>` **<** ``Node``

Node that generates random loot from loot resources into target inventories.

.. rst-class:: classref-introduction-group

Description
-----------

The LootGenerator node provides functionality for generating random items from weighted loot resources and placing them into target inventories. It inherits from :ref:`NodeInventories<class_NodeInventories>` and can access the inventory database for item validation. This is commonly used in survival games for treasure chests, enemy drops, and resource gathering mechanics.



The loot generation uses weighted random selection where items with higher weights are more likely to be selected. Each loot item can specify minimum and maximum amounts to generate random quantities.

.. rst-class:: classref-reftable-group

Properties
----------

.. table::
   :widths: auto

   +--------------+----------------------------------------------------------------------------------+------------------+
   | ``String``   | :ref:`loot_id<class_LootGenerator_property_loot_id>`                             |                  |
   +--------------+----------------------------------------------------------------------------------+------------------+
   | ``NodePath`` | :ref:`target_inventory_path<class_LootGenerator_property_target_inventory_path>` | ``NodePath("")`` |
   +--------------+----------------------------------------------------------------------------------+------------------+

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +-----------------------------------+---------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`generate_loot<class_LootGenerator_method_generate_loot>`\ (\ )                              |
   +-----------------------------------+---------------------------------------------------------------------------------------------------+
   | |void|                            | :ref:`generate_loot_count<class_LootGenerator_method_generate_loot_count>`\ (\ count\: ``int``\ ) |
   +-----------------------------------+---------------------------------------------------------------------------------------------------+
   | :ref:`Inventory<class_Inventory>` | :ref:`get_target_inventory<class_LootGenerator_method_get_target_inventory>`\ (\ ) |const|        |
   +-----------------------------------+---------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Property Descriptions
---------------------

.. _class_LootGenerator_property_loot_id:

.. rst-class:: classref-property

``String`` **loot_id** :ref:`ðŸ”—<class_LootGenerator_property_loot_id>`

.. rst-class:: classref-property-setget

- |void| **set_loot_id**\ (\ value\: ``String``\ )
- ``String`` **get_loot_id**\ (\ )

The ID of the :ref:`Loot<class_Loot>` resource containing the weighted list of items that can be generated. This ID references a loot resource in the inventory database that defines which items can be generated and their relative probabilities.

.. rst-class:: classref-item-separator

----

.. _class_LootGenerator_property_target_inventory_path:

.. rst-class:: classref-property

``NodePath`` **target_inventory_path** = ``NodePath("")`` :ref:`ðŸ”—<class_LootGenerator_property_target_inventory_path>`

.. rst-class:: classref-property-setget

- |void| **set_target_inventory_path**\ (\ value\: ``NodePath``\ )
- ``NodePath`` **get_target_inventory_path**\ (\ )

The ``NodePath`` to the target :ref:`Inventory<class_Inventory>` node where generated loot will be placed. The path should point to a valid Inventory node in the scene tree.

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_LootGenerator_method_generate_loot:

.. rst-class:: classref-method

|void| **generate_loot**\ (\ ) :ref:`ðŸ”—<class_LootGenerator_method_generate_loot>`

Generate a single random item from the assigned loot resource and add it to the target inventory. This is equivalent to calling :ref:`generate_loot_count()<class_LootGenerator_method_generate_loot_count>` with a count of 1.

.. rst-class:: classref-item-separator

----

.. _class_LootGenerator_method_generate_loot_count:

.. rst-class:: classref-method

|void| **generate_loot_count**\ (\ count\: ``int``\ ) :ref:`ðŸ”—<class_LootGenerator_method_generate_loot_count>`

Generate the specified number of random items from the assigned loot resource and add them to the target inventory. Each generation is independent, so the same item may be selected multiple times. The actual amount of each item is randomly determined between the min_amount and max_amount specified in the :ref:`LootItem<class_LootItem>`.

.. rst-class:: classref-item-separator

----

.. _class_LootGenerator_method_get_target_inventory:

.. rst-class:: classref-method

:ref:`Inventory<class_Inventory>` **get_target_inventory**\ (\ ) |const| :ref:`ðŸ”—<class_LootGenerator_method_get_target_inventory>`

Returns the target :ref:`Inventory<class_Inventory>` node found at the :ref:`target_inventory_path<class_LootGenerator_property_target_inventory_path>`. Returns null if the path is empty or no valid inventory is found at the specified path.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
